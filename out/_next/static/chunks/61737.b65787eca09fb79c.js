"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[61737],{61737:function(a,e,t){t.d(e,{fulfillRequest:function(){return r}});var s=t(69246);async function r(a){let e;let{wallet:r,walletConnectClient:i,thirdwebClient:n,event:{topic:l,id:o,params:{chainId:m,request:p}},handlers:h}=a,d=r.getAccount();if(!d)throw Error("No account connected to provided wallet");try{switch(p.method){case"personal_sign":if(null==h?void 0:h.personal_sign)e=await h.personal_sign({account:d,params:p.params});else{let{handleSignRequest:a}=await Promise.resolve().then(t.bind(t,16686));e=await a({account:d,params:p.params})}break;case"eth_sign":if(null==h?void 0:h.eth_sign)e=await h.eth_sign({account:d,params:p.params});else{let{handleSignRequest:a}=await Promise.resolve().then(t.bind(t,16686));e=await a({account:d,params:p.params})}break;case"eth_signTypedData":if(null==h?void 0:h.eth_signTypedData)e=await h.eth_signTypedData({account:d,params:p.params});else{let{handleSignTypedDataRequest:a}=await Promise.resolve().then(t.bind(t,71364));e=await a({account:d,params:p.params})}break;case"eth_signTypedData_v4":if(null==h?void 0:h.eth_signTypedData_v4)e=await h.eth_signTypedData_v4({account:d,params:p.params});else{let{handleSignTypedDataRequest:a}=await Promise.resolve().then(t.bind(t,71364));e=await a({account:d,params:p.params})}break;case"eth_signTransaction":if(null==h?void 0:h.eth_signTransaction)e=await h.eth_signTransaction({account:d,params:p.params});else{let{handleSignTransactionRequest:a}=await Promise.resolve().then(t.bind(t,77848));e=await a({account:d,params:p.params})}break;case"eth_sendTransaction":{let a=(0,s.$)(m);if(null==h?void 0:h.eth_sendTransaction)e=await h.eth_sendTransaction({account:d,chainId:a,params:p.params});else{let{handleSendTransactionRequest:s}=await Promise.resolve().then(t.bind(t,37981));e=await s({account:d,chainId:a,thirdwebClient:n,params:p.params})}break}case"eth_sendRawTransaction":{let a=(0,s.$)(m);if(null==h?void 0:h.eth_sendRawTransaction)e=await h.eth_sendRawTransaction({account:d,chainId:a,params:p.params});else{let{handleSendRawTransactionRequest:s}=await Promise.resolve().then(t.bind(t,62546));e=await s({account:d,chainId:a,params:p.params})}break}case"wallet_addEthereumChain":if(null==h?void 0:h.wallet_addEthereumChain)e=await h.wallet_addEthereumChain({wallet:r,params:p.params});else throw Error("Unsupported request method: wallet_addEthereumChain");break;case"wallet_switchEthereumChain":if(null==h?void 0:h.wallet_switchEthereumChain)e=await h.wallet_switchEthereumChain({wallet:r,params:p.params});else{let{handleSwitchChain:a}=await Promise.resolve().then(t.bind(t,37928));e=await a({wallet:r,params:p.params})}break;default:{let a=null==h?void 0:h[p.method];if(a)e=await a({account:d,chainId:(0,s.$)(m),params:p.params});else throw Error("Unsupported request method: ".concat(p.method))}}}catch(a){e={code:"object"==typeof a&&null!==a&&"code"in a?a.code:500,message:"object"==typeof a&&null!==a&&"message"in a?a.message:"Unknown error"}}i.respond({topic:l,response:{id:o,jsonrpc:"2.0",result:e}})}}}]);